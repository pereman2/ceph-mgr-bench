diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index adb82e1e1ec..96a707098ab 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -886,6 +886,8 @@ if(NOT WIN32)
 endif()
 
 if (WITH_MGR)
+
+
   add_dependencies(vstart-base ceph-mgr)
 endif()
 
@@ -996,4 +998,3 @@ if(DOXYGEN_FOUND)
     rgw
     COMMENT "Generate C++ documentation")
 endif()
-
diff --git a/src/common/options/global.yaml.in b/src/common/options/global.yaml.in
index 565583c319e..62eae403a8a 100644
--- a/src/common/options/global.yaml.in
+++ b/src/common/options/global.yaml.in
@@ -1025,11 +1025,11 @@ options:
   level: advanced
   desc: Allowing compression when on-wire encryption is enabled
   long_desc: Combining encryption with compression reduces the level of security of
-    messages between peers. In case both encryption and compression are enabled, 
-    compression setting will be ignored and message will not be compressed. 
-    This behaviour can be override using this setting. 
+    messages between peers. In case both encryption and compression are enabled,
+    compression setting will be ignored and message will not be compressed.
+    This behaviour can be override using this setting.
   default: false
-  see_also: 
+  see_also:
   - ms_osd_compress_mode
   flags:
   - runtime
@@ -1496,11 +1496,11 @@ options:
 - name: mon_initial_members
   type: str
   level: advanced
-  fmt_desc: The IDs of initial monitors in a cluster during startup. If 
-    specified, Ceph requires an odd number of monitors to form an 
+  fmt_desc: The IDs of initial monitors in a cluster during startup. If
+    specified, Ceph requires an odd number of monitors to form an
     initial quorum (e.g., 3).
-  note: A *majority* of monitors in your cluster must be able to reach 
-    each other in order to establish a quorum. You can decrease the initial 
+  note: A *majority* of monitors in your cluster must be able to reach
+    each other in order to establish a quorum. You can decrease the initial
     number of monitors to establish a quorum with this setting.
   services:
   - mon
@@ -2469,13 +2469,13 @@ options:
   desc: number of PGs for new pools
   fmt_desc: The default number of placement groups for a pool. The default
     value is the same as ``pg_num`` with ``mkpool``.
-  long_desc: With default value of `osd_pool_default_pg_autoscale_mode` being 
-    `on` the number of PGs for new pools will start out with 1 pg, unless the 
+  long_desc: With default value of `osd_pool_default_pg_autoscale_mode` being
+    `on` the number of PGs for new pools will start out with 1 pg, unless the
     user specifies the pg_num.
   default: 32
   services:
   - mon
-  see_also: 
+  see_also:
   - osd_pool_default_pg_autoscale_mode
   flags:
   - runtime
@@ -4297,7 +4297,7 @@ options:
   flags:
   - create
   with_legacy: true
-- name: bluestore_use_optimal_io_size_for_min_alloc_size 
+- name: bluestore_use_optimal_io_size_for_min_alloc_size
   type: bool
   level: advanced
   desc: Discover media optimal IO Size and use for min_alloc_size
@@ -6120,3 +6120,21 @@ options:
   default: 0
   services:
   - mgr
+- name: mgr_inject
+  type: bool
+  level: dev
+  desc: Enable/disable injection of fake data in the mgr module
+  default: false
+  flags:
+  - runtime
+  with_legacy: true
+  services:
+  - mgr
+- name: mgr_inject_num_osds
+  type: int
+  level: dev
+  desc: Number of osds to inject in the mgr module
+  default: 0
+  flags:
+  - runtime
+  with_legacy: true
diff --git a/src/mgr/ActivePyModules.cc b/src/mgr/ActivePyModules.cc
index 0c08f3a02b5..56af8d4e552 100644
--- a/src/mgr/ActivePyModules.cc
+++ b/src/mgr/ActivePyModules.cc
@@ -196,14 +196,24 @@ PyObject *ActivePyModules::cacheable_get_python(const std::string &what)
   return obj;
 }
 
+char formatter = 'p';
 PyObject *ActivePyModules::get_python(const std::string &what)
 {
   uint64_t ttl_seconds = g_conf().get_val<uint64_t>("mgr_ttl_cache_expire_seconds");
 
   PyFormatter pf;
   PyJSONFormatter jf;
+
+  if (what == "j") {
+    formatter = 'j';
+    Py_RETURN_NONE;
+  } else if(what == "p") {
+    formatter = 'p';
+    Py_RETURN_NONE;
+  }
+
   // Use PyJSONFormatter if TTL cache is enabled.
-  Formatter &f = ttl_seconds ? (Formatter&)jf : (Formatter&)pf;
+  Formatter &f = formatter == 'j' ? (Formatter&)jf : (Formatter&)pf;
 
   if (what == "fs_map") {
     without_gil_t no_gil;
@@ -504,7 +514,7 @@ PyObject *ActivePyModules::get_python(const std::string &what)
   }
   without_gil_t no_gil;
   no_gil.acquire_gil();
-  if(ttl_seconds) {
+  if(formatter == 'j') {
     return jf.get();
   } else {
     return pf.get();
diff --git a/src/mgr/CMakeLists.txt b/src/mgr/CMakeLists.txt
index d688030343e..e75d6ea0caa 100644
--- a/src/mgr/CMakeLists.txt
+++ b/src/mgr/CMakeLists.txt
@@ -16,6 +16,7 @@ if(WITH_MGR)
     DaemonServer.cc
     DaemonState.cc
     Gil.cc
+    Injector.cc
     Mgr.cc
     mgr_perf_counters.cc
     MgrStandby.cc
@@ -37,11 +38,18 @@ if(WITH_MGR)
   if(WITH_LIBCEPHSQLITE)
     target_link_libraries(ceph-mgr cephsqlite SQLite3::SQLite3)
   endif()
+  set(FLATBUFFERS_SRC_DIR ${PROJECT_SOURCE_DIR}/flatbuffers)
+
+  # Add FlatBuffers directly to our build. This defines the `flatbuffers` target.
+  add_subdirectory(${FLATBUFFERS_SRC_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR}/flatbuffers-build
+    EXCLUDE_FROM_ALL)
   target_link_libraries(ceph-mgr
     osdc client heap_profiler
     global-static ceph-common
     Boost::python${MGR_PYTHON_VERSION_MAJOR}${MGR_PYTHON_VERSION_MINOR}
-    Python3::Python ${CMAKE_DL_LIBS} ${GSSAPI_LIBRARIES})
+    Python3::Python ${CMAKE_DL_LIBS} ${GSSAPI_LIBRARIES}
+    flatbuffers)
   set_target_properties(ceph-mgr PROPERTIES
     POSITION_INDEPENDENT_CODE ${EXE_LINKER_USE_PIE})
   install(TARGETS ceph-mgr DESTINATION bin)
diff --git a/src/mgr/ClusterState.h b/src/mgr/ClusterState.h
index 7939cd8eb8f..cec57b875cd 100644
--- a/src/mgr/ClusterState.h
+++ b/src/mgr/ClusterState.h
@@ -21,6 +21,7 @@
 #include "osdc/Objecter.h"
 #include "mon/MonClient.h"
 #include "mon/PGMap.h"
+#include "mgr/Injector.h"
 #include "mgr/ServiceMap.h"
 
 class MMgrDigest;
@@ -118,12 +119,21 @@ public:
     return monc->with_monmap(std::forward<Args>(args)...);
   }
 
-  template<typename... Args>
-  auto with_osdmap(Args &&... args) const ->
-    decltype(objecter->with_osdmap(std::forward<Args>(args)...))
+  bool inject_python_on() const {
+    return g_conf().get_val<bool>("mgr_inject");
+  }
+  template <typename Callback, typename ...Args>
+  auto with_osdmap(Callback&& cb, Args&& ...args) const ->
+    decltype(objecter->with_osdmap(std::forward<Callback>(cb),
+	  std::forward<Args>(args)...))
   {
-    ceph_assert(objecter != nullptr);
-    return objecter->with_osdmap(std::forward<Args>(args)...);
+    if(inject_python_on()) {
+      OSDMap *osdmap = Injector::get_osdmap();
+      return std::forward<Callback>(cb)(*osdmap, std::forward<Args>(args)...);
+    } else {
+      ceph_assert(objecter != nullptr);
+      return objecter->with_osdmap(std::forward<Callback>(cb), std::forward<Args>(args)...);
+    }
   }
 
   // call cb(osdmap, pg_map, ...args) with the appropriate locks
diff --git a/src/mgr/Injector.cc b/src/mgr/Injector.cc
new file mode 100644
index 00000000000..8870003e5c5
--- /dev/null
+++ b/src/mgr/Injector.cc
@@ -0,0 +1,59 @@
+// -*- mode:C++; tab-width:8; c-basic-offset:2; indent-tabs-mode:t -*-
+// vim: ts=8 sw=2 smarttab
+
+#include "mgr/Injector.h"
+
+#include "osd/OSDMap.h"
+
+#include "PyFormatter.h"
+
+#include "PyUtil.h"
+
+using namespace std;
+
+int num_osds = 0;
+OSDMap *osd_map_global = nullptr;
+int64_t Injector::get_num_osds() {
+  return g_conf().get_val<int64_t>("mgr_inject_num_osds");
+}
+
+// OSDMap::dump_osds filters not existent osds so we need
+// to set the state so we dump non existent ones too
+void Injector::mark_exists_osds(OSDMap *osdmap) {
+  for (int osd = 0; osd < Injector::get_num_osds(); osd++) {
+    osdmap->set_state(osd, CEPH_OSD_EXISTS);
+  }
+}
+
+PyObject *Injector::get_python(const std::string &what) {
+  PyJSONFormatter f;
+
+  f.open_object_section("");
+  if (what == "osd_map") {
+    int64_t new_num_osds = Injector::get_num_osds();
+    if (osd_map_global == nullptr || new_num_osds != num_osds) {
+      osd_map_global = new OSDMap;
+      uuid_d id = uuid_d();
+      osd_map_global->build_simple(g_ceph_context, 1, id, new_num_osds);
+      Injector::mark_exists_osds(osd_map_global);
+      num_osds = new_num_osds;
+    }
+    osd_map_global->dump(&f);
+    f.close_section();
+  } else {
+    Py_RETURN_NONE;
+  }
+  return f.get();
+}
+
+OSDMap *Injector::get_osdmap() {
+  int64_t new_num_osds = Injector::get_num_osds();
+  if (osd_map_global == nullptr || new_num_osds != num_osds) {
+    osd_map_global = new OSDMap;
+    uuid_d id = uuid_d();
+    osd_map_global->build_simple(g_ceph_context, 1, id, new_num_osds);
+    Injector::mark_exists_osds(osd_map_global);
+    num_osds = new_num_osds;
+  }
+  return osd_map_global;
+}
diff --git a/src/mgr/Injector.h b/src/mgr/Injector.h
new file mode 100644
index 00000000000..abfebfac8f4
--- /dev/null
+++ b/src/mgr/Injector.h
@@ -0,0 +1,20 @@
+// -*- mode:C++; tab-width:8; c-basic-offset:2; indent-tabs-mode:t -*-
+// vim: ts=8 sw=2 smarttab
+
+#pragma once
+
+#include "osd/OSDMap.h"
+#include "flexbuffers.h"
+
+#include "PyUtil.h"
+
+class Injector {
+private:
+  static int64_t get_num_osds();
+  static void mark_exists_osds(OSDMap *osdmap);
+
+public:
+  static PyObject *get_python(const std::string &what);
+  static OSDMap *get_osdmap();
+};
+
